server.port=${PORT:8080}

vk.clientId= # Enter vk client id...
vk.redirectUri=http://localhost:8080/vk-auth/code
vk.getCode.url=https://oauth.vk.com/authorize?client_id=${vk.clientId}&display=page&redirect_uri=${vk.redirectUri}&scope=offline,email&response_type=code&v=5.131
upload.realpath=C:\\Users\\purple\\Desktop\\resources
upload.url.suffix=/file
upload.url.suffix.picture=/picture
upload.url.suffix.books=/books
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=55MB

spring.web.resources.static-locations=classpath:/static/
spring.freemarker.template-loader-path=classpath:/view/
spring.freemarker.expose-request-attributes=true

spring.datasource.url=jdbc:postgresql://localhost:5432/politics
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update

spring.mvc.throw-exception-if-no-handler-found=true
spring.mvc.static-path-pattern=/static/**

## OAuth provider details.
#spring.security.oauth2.client.provider.authorizationUri=
#spring.security.oauth2.client.provider.tokenUri=
#spring.security.oauth2.client.provider.userInfoUri=
#spring.security.oauth2.client.provider.userInfoAuthenticationMethod=
#spring.security.oauth2.client.provider.userNameAttribute=
#spring.security.oauth2.client.provider.jwkSetUri=
#spring.security.oauth2.client.provider.issuerUri=
#
## OAuth client registrations.
#spring.security.oauth2.client.registration.provider=
#spring.security.oauth2.client.registration.clientId=51744552
#spring.security.oauth2.client.registration.clientSecret=51aWaFDvXFP3dNNxiDiX
#spring.security.oauth2.client.registration.clientAuthenticationMethod=
#spring.security.oauth2.client.registration.authorizationGrantType=
#spring.security.oauth2.client.registration.redirectUri=
#spring.security.oauth2.client.registration.scope=
#spring.security.oauth2.client.registration.clientName=